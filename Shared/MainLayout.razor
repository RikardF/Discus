@inherits LayoutComponentBase
@inject IJSRuntime JS
@using Google.Cloud.Firestore
@inject FirestoreDb firestoreDb
@using ExArbete.Models
@using ExArbete.Interfaces
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IUserService userService
@inject IPostService postService
@inject ICategoryService categoryService
@using Append.Blazor.Notifications
@inject INotificationService NotificationService

<PageTitle>ExArbete</PageTitle>

<div class="page">
        <NavMenu />

        <main>
            <div class="top-row px-4">

                <div class="user-menu">
                    <AuthorizeView>
                        <Authorized>
                            <div class="auth-row">
                                <p class="name-text">@(userService.User?.GoogleName ?? "")</p>
                                <div class="profile-image">
                                    <img src="@userService.User?.ProfileImage" @onclick=ToggleMenu
                                        referrerpolicy="no-referrer">
                                </div>

                            </div>

                        </Authorized>
                        <NotAuthorized>
                            <span class="bi bi-person-circle user-icon" @onclick=ToggleMenu>
                            </span>
                        </NotAuthorized>
                    </AuthorizeView>

                    <div id="dropdown" class="dropdown-menu @CssCollapse">
                        <ul class="user-menu-list">
                            <AuthorizeView>
                                <Authorized>
                                    <li>Administration</li>
                                    <li>
                                        <NavLink href="/profile">Profile</NavLink>
                                    </li>
                                    <li>
                                        <NavLink href="/Identity/Account/Logout">Log out</NavLink>
                                    </li>
                                </Authorized>
                                <NotAuthorized>
                                    <li>
                                        <NavLink href="/Identity/Account/Login">Log in</NavLink>
                                    </li>
                                </NotAuthorized>
                            </AuthorizeView>


                        </ul>
                    </div>
                </div>


            </div>

            <article class="content px-4" @onclick='async (eventargs) => await HandleClick(eventargs)'>

                @Body

            </article>
        </main>
</div>

@code {
    private bool collapseMenu = true;
    private FirestoreChangeListener? firestoreChangeListener;
    private string? CssCollapse => collapseMenu ? "collapse" : null;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            AuthenticationState authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            PermissionType permission = await NotificationService.RequestPermissionAsync();
            if (authenticationState.User.Identity!.IsAuthenticated)
            {
                firestoreChangeListener = firestoreDb.Collection("posts")
                        .Listen((snapshot) =>
                        {
                            int previousCount = postService.PostList.Count();
                            postService.PostList = new();
                            postService.PostList.AddRange(snapshot.Documents.Select(d => d.ConvertTo<Post>()));
                            if(postService.PostList.Count() > previousCount && previousCount != 0 && userService.User!.EnableNotifications)
                            {
                                var awaiter = NotificationService.CreateAsync("ExArbete", "A new post has recently been published").GetAwaiter();
                                awaiter.OnCompleted(async () => await Task.Delay(100));
                            }
                            categoryService.CalculateBadgeValues(postService.PostList, userService.User!.LastVisit);
                            postService.PostDataChanged();
                        });

                await userService.GetDataIfExistingUser(authenticationState.User.Claims.Where(c => c.Type ==
                ClaimTypes.Email).First().Value, firestoreDb);

            }
            await InvokeAsync(() => StateHasChanged());
        }
    }

    private void ToggleMenu()
    {

        collapseMenu = !collapseMenu;
    }

    private async Task HandleClick(MouseEventArgs eventArgs)
    {
        bool outsideDropdownMenu = await JS.InvokeAsync<bool>("handleDropdownMenu", eventArgs.PageX, eventArgs.PageY);
        if (!collapseMenu && outsideDropdownMenu)
        {
            collapseMenu = outsideDropdownMenu;
        }
    }
}

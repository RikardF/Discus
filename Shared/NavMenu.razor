@using ExArbete.Data
@using Google.Cloud.Firestore
@inject FirestoreDb firestoreDb
@inject IJSRuntime JS
@inject NavigationManager MyNavigationManager
@using ExArbete.Shared.Components

<div id="sidebar" class="flex-column">
<div class="active-nav @CollapseCssClass" style="margin-top: @activeNavDistanceFromTop"></div>

    <div class="sidebar @CollapseCssClass">
        
        <div class="top-row @CollapseCssClass ps-3 navbar navbar-dark">

            <a class="navbar-brand" href="">ExArbete</a>
            <span class="navbar-toggler-icon oi" @onclick="ToggleNavMenu"></span>



        </div>
        <nav class="flex-column">

            <div id="home" class="nav-item">
                <NavLink class="nav-link" href="" Match="NavLinkMatch.All" onclick='@(async () => await GetDistanceFromTop("home"))'>
                    <span class="oi bi-house-door" aria-hidden="true">
                        <Badge BadgeNumber="2" />
                    </span>
                    <p class="menu-text">Home</p>

                </NavLink>
                

            </div>


            <div id="counter" class="nav-item">
                <NavLink class="nav-link" href="counter" onclick='@(async () => await GetDistanceFromTop("counter"))'>
                    <span class="oi oi-plus" aria-hidden="true"></span>
                    <p class="menu-text">Counter</p>
                </NavLink>
            </div>
            <div id="fetchdata" class="nav-item">
                <NavLink class="nav-link" href="fetchdata" onclick='@(async () => await GetDistanceFromTop("fetchdata"))'>
                    <i class="oi oi-list-rich" aria-hidden="true"></i>
                    <p class="menu-text">Fetch dataaaaaa</p>

                </NavLink>
            </div>
            @foreach (Category category in categoryList ?? new List<Category>())
            {
                <div id='@("posts/" + category.Id)' class="nav-item">
                    <NavLink class="nav-link" href='@("posts/" + category.Id)' onclick='@(async () => await GetDistanceFromTop("posts/" + @category.Id))'>
                        <i class="@category.Icon colored oi"></i>
                        <p class="menu-text">@category.Name</p>
                    </NavLink>
                </div>
            }
            @if (isLoading)
            {
                <div class="center-horizontal">
                    <div class="spinner-border text-light"></div>
                </div>

            }
        </nav>
    </div>
</div>





@code {
    [CascadingParameter]
    protected List<Category>? categoryList { get; set; }
    private bool collapseNavMenu = true;
    private string? CollapseCssClass => collapseNavMenu ? "collapse" : null;
    private bool isLoading = true;
    private string? activeNavDistanceFromTop;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await Task.Delay(500);
            await RenderSelectionBulb();
            isLoading = false;
        }
        await InvokeAsync(() => StateHasChanged());
    }

    public async Task RenderSelectionBulb() {
        Uri uri = new Uri(MyNavigationManager.Uri);
            if(uri.AbsolutePath == "/") {
                await GetDistanceFromTop("home");
            } else {
                   await GetDistanceFromTop(uri.AbsolutePath.Trim('/')); 
                
            }
    }

    private async Task GetDistanceFromTop(string? id) {
        int distanceFromTop = await JS.InvokeAsync<int>("getDistanceFromTop", id);
        Uri uri = new Uri(MyNavigationManager.Uri);
        if(uri.AbsolutePath == "/") {
            activeNavDistanceFromTop = distanceFromTop + 56  + "px";
        } else {
           activeNavDistanceFromTop = distanceFromTop  + "px"; 
        }
        
        await InvokeAsync(() => StateHasChanged());
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    
}

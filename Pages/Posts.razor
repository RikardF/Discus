@page "/posts/{categoryId}"
@using ExArbete.Shared.Components
@using ExArbete.Interfaces
@inject IHttpContextAccessor httpContextAccessor
@inject IUserService userService
@inject IPostService postService
@inject AuthenticationStateProvider authProvider


<PageTitle>@categoryList?.Find(c => c.Id == CategoryId)?.Name</PageTitle>

@using ExArbete.Models
@using Google.Cloud.Firestore
@inject FirestoreDb firestoreDb
<h1>@categoryList?.Find(c => c.Id == CategoryId)?.Name</h1>

<AuthorizeView>
    <Authorized>
        @if(userService.IsNewUser)
        {
            <p>You need to complete your registration before entering this section.</p>
        } else {
            <div>
                <EditForm Context="NewPostContext" class="form-column" EditContext=@editContext OnValidSubmit=@SubmitPost>
                    <DataAnnotationsValidator />
                    
                    <InputOnChange @bind-Value="newPost.Title" class="form-control mb-2"
                    placeholder="Title"></InputOnChange>
                    <div class="form-row">
                        <InputAreaOnChange rows="4" @bind-Value="newPost.Content" class="form-control"
                    placeholder="New post"></InputAreaOnChange>
                    <button type="submit"
                    class="btn btn-secondary btn-sm submit-button">Submit</button>
                    </div>
                    <ValidationSummary />
                </EditForm>
            
            </div>
            @foreach (Post post in postService.PostList.FindAll(p => p.CategoryId == CategoryId).OrderByDescending(p => p.CreatedAt))
            {
    <PostCard PostData=@post></PostCard>
}
        }
        

    </Authorized>
    <NotAuthorized>
        <p>You need to <NavLink href="/Identity/Account/Login">sign in</NavLink> to view this page</p>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Parameter]
    public string? CategoryId { get; set; }
    [CascadingParameter]
    protected List<Category>? categoryList { get; set; }
    private Post newPost = new();
    private EditContext? editContext;
    private FirestoreChangeListener? firestoreChangeListener;
    
    protected override void OnInitialized()
    {
        editContext = new(newPost);
    }
    protected override void OnAfterRender(bool firstRender)
    {
        if(firstRender){
            firestoreChangeListener = firestoreDb.Collection("posts")
                        .Listen(async (snapshot) =>
                        {
                            postService.PostList.Clear();
                            postService.PostList.AddRange(snapshot.Documents.Select(d => d.ConvertTo<Post>()));
                            await InvokeAsync(() => StateHasChanged());
                        });
        }
    }
        private async Task SubmitPost()
    {
        newPost.CategoryId = CategoryId;
        newPost.CreatedAt = Timestamp.GetCurrentTimestamp();
        newPost.CreatedBy = userService.User?.Id;
        newPost.SubPosts = new();
        newPost.Likes = new();
        await postService.PublishPost(null, newPost, firestoreDb);
        newPost = new();
        editContext = new(newPost);
    }
}

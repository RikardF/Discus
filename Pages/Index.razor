@page "/"
@using Google.Cloud.Firestore
@using ExArbete.Models
@using ExArbete.Interfaces
@using System.Security.Claims
@inject FirestoreDb firestoreDb
@inject IUserService userService
@inject AuthenticationStateProvider authenticationStateProvider

<PageTitle>Index</PageTitle>

<AuthorizeView>
    <Authorized>
        <h1>Hello @userService.User?.GoogleName</h1>
        @if(userService.IsNewUser)
        {
            <p>This seems to be the first time you are joining us.</p>
            <p>Before you proceed you need to select a username that will be visible for other users here on this page.</p>
            <div>
                <EditForm Context="newUserName" Model=@userService.User OnSubmit=@OnUsernameSubmit>
                    <input class="form-control" @bind-value="userService.User.Username" type="text" placeholder="Default input">
                    <button type="submit" class="btn btn-secondary btn-sm">Submit</button>
                </EditForm>
                @if(invalidUsernameError)
                {
                    <p>Username is already taken</p>
                }
            </div>
        } else {
            <p>Welcome back!</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>not inloggad</p>
    </NotAuthorized>
</AuthorizeView>



@code {
    private bool invalidUsernameError;
    private FirestoreChangeListener firestoreChangeListener;
    private List<Category> categories = new();
    protected override async Task OnParametersSetAsync()
    {
        AuthenticationState authenticationState = await authenticationStateProvider.GetAuthenticationStateAsync();
            if(authenticationState.User.Identity.IsAuthenticated)
                {
                    await userService.GetDataIfExistingUser(authenticationState.User.Claims.Where(c => c.Type == ClaimTypes.Email).First().Value, firestoreDb);
                }
            
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        
    }

    private async Task OnUsernameSubmit()
    {
        Console.WriteLine("blaa");
        invalidUsernameError = await userService.CreateUser(firestoreDb);
        
        await InvokeAsync(() => StateHasChanged());
    }

    @* private async Task<List<Category>> GetCategories()
    {
        CollectionReference collection = firestoreDb.Collection("categories");

        QuerySnapshot snapshot = await firestoreDb.Collection("categories").GetSnapshotAsync();
        @* foreach (DocumentSnapshot doc in snapshot)
            {
            Console.WriteLine(doc.Id);
            Category cat = doc.ConvertTo<Category>();
            Console.WriteLine(cat.Name);
            }
            return new List<Category>(); 
        return snapshot.Documents.Select(d => d.ConvertTo<Category>()).ToList<Category>();
    } *@

    public void Dispose()
    {
        firestoreChangeListener?.StopAsync();
        Console.WriteLine("stop");
    }
}
